{
	"name": "Dataflow_Summary",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sql_NYC_Payroll_Data_2020",
						"type": "DatasetReference"
					},
					"name": "payroll2020SQL"
				},
				{
					"dataset": {
						"referenceName": "ds_sql_NYC_Payroll_Data_2021",
						"type": "DatasetReference"
					},
					"name": "payroll2021SQL"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sql_NYC_Payroll_Summary",
						"type": "DatasetReference"
					},
					"name": "sinkSQLSummary"
				},
				{
					"dataset": {
						"referenceName": "ds_syn_NYC_Payroll_Summary",
						"type": "DatasetReference"
					},
					"name": "sinkDLSummary"
				}
			],
			"transformations": [
				{
					"name": "unionPayroll"
				},
				{
					"name": "filterYear"
				},
				{
					"name": "derivedColumnTotalPaid"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     dataflow_param_fiscalyear as integer (2020)",
				"}",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> payroll2020SQL",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyCode as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> payroll2021SQL",
				"payroll2020SQL, payroll2021SQL union(byName: true)~> unionPayroll",
				"unionPayroll filter(toInteger(FiscalYear) >= $dataflow_param_fiscalyear) ~> filterYear",
				"filterYear derive(TotalPaid = RegularGrossPaid + TotalOTPaid + TotalOtherPay) ~> derivedColumnTotalPaid",
				"derivedColumnTotalPaid aggregate(groupBy(AgencyID,",
				"          FiscalYear),",
				"     TotalPaidSum = sum(TotalPaid)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          FiscalYear,",
				"          AgencyName = AgencyID,",
				"          TotalPaid = TotalPaidSum",
				"     )) ~> sinkSQLSummary",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          AgencyID,",
				"          FiscalYear,",
				"          TotalPaidSum",
				"     )) ~> sinkDLSummary"
			]
		}
	}
}